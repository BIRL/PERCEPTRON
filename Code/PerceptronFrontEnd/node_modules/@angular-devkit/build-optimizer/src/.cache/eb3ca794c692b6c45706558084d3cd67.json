{"remainingRequest":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\delay.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\delay.js","mtime":1532940287295},{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._scheduler_async,.._operators_delay PURE_IMPORTS_END */\r\nimport { async } from '../scheduler/async';\r\nimport { delay as higherOrder } from '../operators/delay';\r\n/**\r\n * Delays the emission of items from the source Observable by a given timeout or\r\n * until a given Date.\r\n *\r\n * <span class=\"informal\">Time shifts each item by some specified amount of\r\n * milliseconds.</span>\r\n *\r\n * <img src=\"./img/delay.png\" width=\"100%\">\r\n *\r\n * If the delay argument is a Number, this operator time shifts the source\r\n * Observable by that amount of time expressed in milliseconds. The relative\r\n * time intervals between the values are preserved.\r\n *\r\n * If the delay argument is a Date, this operator time shifts the start of the\r\n * Observable execution until the given date occurs.\r\n *\r\n * @example <caption>Delay each click by one second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\r\n * delayedClicks.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Delay all clicks until a future date happens</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\r\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\r\n * delayedClicks.subscribe(x => console.log(x));\r\n *\r\n * @see {@link debounceTime}\r\n * @see {@link delayWhen}\r\n *\r\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\r\n * a `Date` until which the emission of the source items is delayed.\r\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\r\n * managing the timers that handle the time-shift for each item.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by the specified timeout or Date.\r\n * @method delay\r\n * @owner Observable\r\n */\r\nexport function delay(delay, scheduler) {\r\n    if (scheduler === void 0) {\r\n        scheduler = async;\r\n    }\r\n    return higherOrder(delay, scheduler)(this);\r\n}\r\n//# sourceMappingURL=delay.js.map \r\n",null]}