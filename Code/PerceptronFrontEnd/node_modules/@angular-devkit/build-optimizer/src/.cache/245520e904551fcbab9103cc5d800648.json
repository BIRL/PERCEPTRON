{"remainingRequest":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\repeatWhen.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\repeatWhen.js","mtime":1532940287326},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_repeatWhen PURE_IMPORTS_END */\r\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\n * this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\r\n * which a user can `complete` or `error`, aborting the repetition.\r\n * @return {Observable} The source Observable modified with repeat logic.\r\n * @method repeatWhen\r\n * @owner Observable\r\n */\r\nexport function repeatWhen(notifier) {\r\n    return higherOrder(notifier)(this);\r\n}\r\n//# sourceMappingURL=repeatWhen.js.map \r\n",null]}