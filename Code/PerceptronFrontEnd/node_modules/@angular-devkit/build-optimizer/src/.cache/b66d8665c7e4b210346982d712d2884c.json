{"remainingRequest":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\webpack-dev-server\\client\\socket.js","dependencies":[{"path":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\webpack-dev-server\\client\\socket.js","mtime":1532940290636},{"path":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["'use strict';\r\n\r\nvar SockJS = require('sockjs-client/dist/sockjs');\r\n\r\nvar retries = 0;\r\nvar sock = null;\r\n\r\nvar socket = function initSocket(url, handlers) {\r\n  sock = new SockJS(url);\r\n\r\n  sock.onopen = function onopen() {\r\n    retries = 0;\r\n  };\r\n\r\n  sock.onclose = function onclose() {\r\n    if (retries === 0) {\r\n      handlers.close();\r\n    }\r\n\r\n    // Try to reconnect.\r\n    sock = null;\r\n\r\n    // After 10 retries stop trying, to prevent logspam.\r\n    if (retries <= 10) {\r\n      // Exponentially increase timeout to reconnect.\r\n      // Respectfully copied from the package `got`.\r\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\r\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\r\n      retries += 1;\r\n\r\n      setTimeout(function () {\r\n        socket(url, handlers);\r\n      }, retryInMs);\r\n    }\r\n  };\r\n\r\n  sock.onmessage = function onmessage(e) {\r\n    // This assumes that all data sent via the websocket is JSON.\r\n    var msg = JSON.parse(e.data);\r\n    if (handlers[msg.type]) {\r\n      handlers[msg.type](msg.data);\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports = socket;",null]}