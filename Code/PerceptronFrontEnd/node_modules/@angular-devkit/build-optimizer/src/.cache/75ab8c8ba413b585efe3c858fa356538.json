{"remainingRequest":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\onErrorResumeNext.js","dependencies":[{"path":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\onErrorResumeNext.js","mtime":1532940287406},{"path":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { FromObservable } from '../observable/FromObservable';\r\nimport { isArray } from '../util/isArray';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\r\n * that was passed.\r\n *\r\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\r\n *\r\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\r\n *\r\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\r\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\r\n * as the source.\r\n *\r\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\r\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\r\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\r\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\r\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\r\n * be happening until there is no more Observables left in the series, at which point returned Observable will\r\n * complete - even if the last subscribed stream ended with an error.\r\n *\r\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\r\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\r\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\r\n * an error.\r\n *\r\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\r\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\r\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\r\n *\r\n *\r\n * @example <caption>Subscribe to the next Observable after map fails</caption>\r\n * Rx.Observable.of(1, 2, 3, 0)\r\n *   .map(x => {\r\n *       if (x === 0) { throw Error(); }\r\n         return 10 / x;\r\n *   })\r\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\r\n *   .subscribe(\r\n *     val => console.log(val),\r\n *     err => console.log(err),          // Will never be called.\r\n *     () => console.log('that\\'s it!')\r\n *   );\r\n *\r\n * // Logs:\r\n * // 10\r\n * // 5\r\n * // 3.3333333333333335\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // \"that's it!\"\r\n *\r\n * @see {@link concat}\r\n * @see {@link catch}\r\n *\r\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\r\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\r\n * to the next passed Observable and so on, until it completes or runs out of Observables.\r\n * @method onErrorResumeNext\r\n * @owner Observable\r\n */\r\nexport function onErrorResumeNext() {\r\n    var nextSources = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        nextSources[_i - 0] = arguments[_i];\r\n    }\r\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n        nextSources = nextSources[0];\r\n    }\r\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\r\n}\r\n/* tslint:enable:max-line-length */\r\nexport function onErrorResumeNextStatic() {\r\n    var nextSources = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        nextSources[_i - 0] = arguments[_i];\r\n    }\r\n    var source = null;\r\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n        nextSources = nextSources[0];\r\n    }\r\n    source = nextSources.shift();\r\n    return new FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\r\n}\r\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (function () {\r\n    function OnErrorResumeNextOperator(nextSources) {\r\n        this.nextSources = nextSources;\r\n    }\r\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n    };\r\n    return OnErrorResumeNextOperator;\r\n}());\r\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(OnErrorResumeNextSubscriber, _super);\r\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\r\n        _super.call(this, destination);\r\n        this.destination = destination;\r\n        this.nextSources = nextSources;\r\n    }\r\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\r\n        var next = this.nextSources.shift();\r\n        if (next) {\r\n            this.add(subscribeToResult(this, next));\r\n        }\r\n        else {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return OnErrorResumeNextSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=onErrorResumeNext.js.map \r\n",null]}