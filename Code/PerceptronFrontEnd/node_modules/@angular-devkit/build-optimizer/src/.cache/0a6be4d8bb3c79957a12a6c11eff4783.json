{"remainingRequest":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\throttle.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\throttle.js","mtime":1532940287342},{"path":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_throttle PURE_IMPORTS_END */\r\nimport { throttle as higherOrder, defaultThrottleConfig } from '../operators/throttle';\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for a duration determined by another Observable, then repeats this\r\n * process.\r\n *\r\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\r\n * duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/throttle.png\" width=\"100%\">\r\n *\r\n * `throttle` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled by calling the `durationSelector` function with the source value,\r\n * which returns the \"duration\" Observable. When the duration Observable emits a\r\n * value or completes, the timer is disabled, and this process repeats for the\r\n * next source value.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounce}\r\n * @see {@link delayWhen}\r\n * @see {@link sample}\r\n * @see {@link throttleTime}\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration for each source value, returned as an Observable or a Promise.\r\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\r\n * to `{ leading: true, trailing: false }`.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttle\r\n * @owner Observable\r\n */\r\nexport function throttle(durationSelector, config) {\r\n    if (config === void 0) {\r\n        config = defaultThrottleConfig;\r\n    }\r\n    return higherOrder(durationSelector, config)(this);\r\n}\r\n//# sourceMappingURL=throttle.js.map \r\n",null]}