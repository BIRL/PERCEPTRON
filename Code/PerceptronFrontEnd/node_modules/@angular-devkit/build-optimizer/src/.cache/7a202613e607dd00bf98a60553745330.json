{"remainingRequest":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\timeout.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\timeout.js","mtime":1532940287342},{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._scheduler_async,.._operators_timeout PURE_IMPORTS_END */\r\nimport { async } from '../scheduler/async';\r\nimport { timeout as higherOrder } from '../operators/timeout';\r\n/**\r\n *\r\n * Errors if Observable does not emit a value in given time span.\r\n *\r\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\r\n *\r\n * <img src=\"./img/timeout.png\" width=\"100%\">\r\n *\r\n * `timeout` operator accepts as an argument either a number or a Date.\r\n *\r\n * If number was provided, it returns an Observable that behaves like a source\r\n * Observable, unless there is a period of time where there is no value emitted.\r\n * So if you provide `100` as argument and first value comes after 50ms from\r\n * the moment of subscription, this value will be simply re-emitted by the resulting\r\n * Observable. If however after that 100ms passes without a second value being emitted,\r\n * stream will end with an error and source Observable will be unsubscribed.\r\n * These checks are performed throughout whole lifecycle of Observable - from the moment\r\n * it was subscribed to, until it completes or errors itself. Thus every value must be\r\n * emitted within specified period since previous value.\r\n *\r\n * If provided argument was Date, returned Observable behaves differently. It throws\r\n * if Observable did not complete before provided Date. This means that periods between\r\n * emission of particular values do not matter in this case. If Observable did not complete\r\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\r\n * stream behaves just as source Observable.\r\n *\r\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\r\n * when returned Observable will check if source stream emitted value or completed.\r\n *\r\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n *\r\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\r\n *                       // since `interval` might fire a bit later then scheduled.\r\n * .subscribe(\r\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\r\n *     err => console.log(err) // Will never be called.\r\n * );\r\n *\r\n * seconds.timeout(900).subscribe(\r\n *     value => console.log(value), // Will never be called.\r\n *     err => console.log(err) // Will emit error before even first value is emitted,\r\n *                             // since it did not arrive within 900ms period.\r\n * );\r\n *\r\n * @example <caption>Use Date to check if Observable completed</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n *\r\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\r\n * .subscribe(\r\n *     value => console.log(value), // Will emit values as regular `interval` would\r\n *                                  // until December 17, 2020 at 03:24:00.\r\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\r\n *                             // since Observable did not complete by then.\r\n * );\r\n *\r\n * @see {@link timeoutWith}\r\n *\r\n * @param {number|Date} due Number specifying period within which Observable must emit values\r\n *                          or Date specifying before when Observable should complete\r\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\r\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\r\n * @method timeout\r\n * @owner Observable\r\n */\r\nexport function timeout(due, scheduler) {\r\n    if (scheduler === void 0) {\r\n        scheduler = async;\r\n    }\r\n    return higherOrder(due, scheduler)(this);\r\n}\r\n//# sourceMappingURL=timeout.js.map \r\n",null]}