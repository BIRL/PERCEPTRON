{"remainingRequest":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\takeWhile.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\takeWhile.js","mtime":1532940287434},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\n/**\r\n * Emits values emitted by the source Observable so long as each value satisfies\r\n * the given `predicate`, and then completes as soon as this `predicate` is not\r\n * satisfied.\r\n *\r\n * <span class=\"informal\">Takes values from the source only while they pass the\r\n * condition given. When the first value does not satisfy, it completes.</span>\r\n *\r\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\r\n *\r\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\r\n * emitted on the source is given to the `predicate` function which returns a\r\n * boolean, representing a condition to be satisfied by the source values. The\r\n * output Observable emits the source values until such time as the `predicate`\r\n * returns false, at which point `takeWhile` stops mirroring the source\r\n * Observable and completes the output Observable.\r\n *\r\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link take}\r\n * @see {@link takeLast}\r\n * @see {@link takeUntil}\r\n * @see {@link skip}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates a value emitted by the source Observable and returns a boolean.\r\n * Also takes the (zero-based) index as the second argument.\r\n * @return {Observable<T>} An Observable that emits the values from the source\r\n * Observable so long as each value satisfies the condition defined by the\r\n * `predicate`, then completes.\r\n * @method takeWhile\r\n * @owner Observable\r\n */\r\nexport function takeWhile(predicate) {\r\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\r\n}\r\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\r\n    function TakeWhileOperator(predicate) {\r\n        this.predicate = predicate;\r\n    }\r\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\r\n    };\r\n    return TakeWhileOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(TakeWhileSubscriber, _super);\r\n    function TakeWhileSubscriber(destination, predicate) {\r\n        _super.call(this, destination);\r\n        this.predicate = predicate;\r\n        this.index = 0;\r\n    }\r\n    TakeWhileSubscriber.prototype._next = function (value) {\r\n        var destination = this.destination;\r\n        var result;\r\n        try {\r\n            result = this.predicate(value, this.index++);\r\n        }\r\n        catch (err) {\r\n            destination.error(err);\r\n            return;\r\n        }\r\n        this.nextOrComplete(value, result);\r\n    };\r\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\r\n        var destination = this.destination;\r\n        if (Boolean(predicateResult)) {\r\n            destination.next(value);\r\n        }\r\n        else {\r\n            destination.complete();\r\n        }\r\n    };\r\n    return TakeWhileSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=takeWhile.js.map \r\n",null]}