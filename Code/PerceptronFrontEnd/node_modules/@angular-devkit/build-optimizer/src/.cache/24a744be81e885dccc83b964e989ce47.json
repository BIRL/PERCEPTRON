{"remainingRequest":"D:\\01_PERCEPTRON\\gitHub\\PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\01_PERCEPTRON\\gitHub\\PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\scheduler\\QueueAction.js","dependencies":[{"path":"D:\\01_PERCEPTRON\\gitHub\\PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\scheduler\\QueueAction.js","mtime":1577085432634},{"path":"D:\\01_PERCEPTRON\\gitHub\\PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1577085403617},{"path":"D:\\01_PERCEPTRON\\gitHub\\PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1577085366146}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { AsyncAction } from './AsyncAction';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport var QueueAction = /*@__PURE__*/ (function (_super) {\r\n    __extends(QueueAction, _super);\r\n    function QueueAction(scheduler, work) {\r\n        _super.call(this, scheduler, work);\r\n        this.scheduler = scheduler;\r\n        this.work = work;\r\n    }\r\n    QueueAction.prototype.schedule = function (state, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        if (delay > 0) {\r\n            return _super.prototype.schedule.call(this, state, delay);\r\n        }\r\n        this.delay = delay;\r\n        this.state = state;\r\n        this.scheduler.flush(this);\r\n        return this;\r\n    };\r\n    QueueAction.prototype.execute = function (state, delay) {\r\n        return (delay > 0 || this.closed) ?\r\n            _super.prototype.execute.call(this, state, delay) :\r\n            this._execute(state, delay);\r\n    };\r\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        // If delay exists and is greater than 0, or if the delay is null (the\r\n        // action wasn't rescheduled) but was originally scheduled as an async\r\n        // action, then recycle as an async action.\r\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\r\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\r\n        }\r\n        // Otherwise flush the scheduler starting with this action.\r\n        return scheduler.flush(this);\r\n    };\r\n    return QueueAction;\r\n}(AsyncAction));\r\n//# sourceMappingURL=QueueAction.js.map \r\n",null]}