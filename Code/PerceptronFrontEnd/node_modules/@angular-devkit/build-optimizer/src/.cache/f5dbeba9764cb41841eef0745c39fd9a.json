{"remainingRequest":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\windowCount.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\windowCount.js","mtime":1532940287441},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subject } from '../Subject';\r\n/**\r\n * Branch out the source Observable values as a nested Observable with each\r\n * nested Observable emitting at most `windowSize` values.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowCount.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits windows every `startWindowEvery`\r\n * items, each containing no more than `windowSize` items. When the source\r\n * Observable completes or encounters an error, the output Observable emits\r\n * the current window and propagates the notification from the source\r\n * Observable. If `startWindowEvery` is not provided, then new windows are\r\n * started immediately at the start of the source and when each window completes\r\n * with size `windowSize`.\r\n *\r\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.windowCount(3)\r\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.windowCount(2, 3)\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link windowWhen}\r\n * @see {@link bufferCount}\r\n *\r\n * @param {number} windowSize The maximum number of values emitted by each\r\n * window.\r\n * @param {number} [startWindowEvery] Interval at which to start a new window.\r\n * For example if `startWindowEvery` is `2`, then a new window will be started\r\n * on every other value from the source. A new window is started at the\r\n * beginning of the source by default.\r\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\r\n * are Observable of values.\r\n * @method windowCount\r\n * @owner Observable\r\n */\r\nexport function windowCount(windowSize, startWindowEvery) {\r\n    if (startWindowEvery === void 0) {\r\n        startWindowEvery = 0;\r\n    }\r\n    return function windowCountOperatorFunction(source) {\r\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\r\n    };\r\n}\r\nvar WindowCountOperator = /*@__PURE__*/ (function () {\r\n    function WindowCountOperator(windowSize, startWindowEvery) {\r\n        this.windowSize = windowSize;\r\n        this.startWindowEvery = startWindowEvery;\r\n    }\r\n    WindowCountOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\r\n    };\r\n    return WindowCountOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar WindowCountSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(WindowCountSubscriber, _super);\r\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\r\n        _super.call(this, destination);\r\n        this.destination = destination;\r\n        this.windowSize = windowSize;\r\n        this.startWindowEvery = startWindowEvery;\r\n        this.windows = [new Subject()];\r\n        this.count = 0;\r\n        destination.next(this.windows[0]);\r\n    }\r\n    WindowCountSubscriber.prototype._next = function (value) {\r\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\r\n        var destination = this.destination;\r\n        var windowSize = this.windowSize;\r\n        var windows = this.windows;\r\n        var len = windows.length;\r\n        for (var i = 0; i < len && !this.closed; i++) {\r\n            windows[i].next(value);\r\n        }\r\n        var c = this.count - windowSize + 1;\r\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\r\n            windows.shift().complete();\r\n        }\r\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\r\n            var window_1 = new Subject();\r\n            windows.push(window_1);\r\n            destination.next(window_1);\r\n        }\r\n    };\r\n    WindowCountSubscriber.prototype._error = function (err) {\r\n        var windows = this.windows;\r\n        if (windows) {\r\n            while (windows.length > 0 && !this.closed) {\r\n                windows.shift().error(err);\r\n            }\r\n        }\r\n        this.destination.error(err);\r\n    };\r\n    WindowCountSubscriber.prototype._complete = function () {\r\n        var windows = this.windows;\r\n        if (windows) {\r\n            while (windows.length > 0 && !this.closed) {\r\n                windows.shift().complete();\r\n            }\r\n        }\r\n        this.destination.complete();\r\n    };\r\n    WindowCountSubscriber.prototype._unsubscribe = function () {\r\n        this.count = 0;\r\n        this.windows = null;\r\n    };\r\n    return WindowCountSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=windowCount.js.map \r\n",null]}