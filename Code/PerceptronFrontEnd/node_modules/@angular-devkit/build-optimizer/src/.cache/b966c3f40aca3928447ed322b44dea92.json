{"remainingRequest":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\repeat.js","dependencies":[{"path":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operator\\repeat.js","mtime":1532940287326},{"path":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"D:\\~Code\\Perceptron\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_repeat PURE_IMPORTS_END */\r\nimport { repeat as higherOrder } from '../operators/repeat';\r\n/**\r\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\r\n *\r\n * <img src=\"./img/repeat.png\" width=\"100%\">\r\n *\r\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\r\n * an empty Observable.\r\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\r\n * count times.\r\n * @method repeat\r\n * @owner Observable\r\n */\r\nexport function repeat(count) {\r\n    if (count === void 0) {\r\n        count = -1;\r\n    }\r\n    return higherOrder(count)(this);\r\n}\r\n//# sourceMappingURL=repeat.js.map \r\n",null]}