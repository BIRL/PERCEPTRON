{"remainingRequest":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\publish.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\publish.js","mtime":1532940287410},{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._Subject,._multicast PURE_IMPORTS_END */\r\nimport { Subject } from '../Subject';\r\nimport { multicast } from './multicast';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <img src=\"./img/publish.png\" width=\"100%\">\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method publish\r\n * @owner Observable\r\n */\r\nexport function publish(selector) {\r\n    return selector ?\r\n        multicast(function () { return new Subject(); }, selector) :\r\n        multicast(new Subject());\r\n}\r\n//# sourceMappingURL=publish.js.map \r\n",null]}