{"remainingRequest":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\scheduler\\AnimationFrameScheduler.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\scheduler\\AnimationFrameScheduler.js","mtime":1532940287449},{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { AsyncScheduler } from './AsyncScheduler';\r\nexport var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {\r\n    __extends(AnimationFrameScheduler, _super);\r\n    function AnimationFrameScheduler() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    AnimationFrameScheduler.prototype.flush = function (action) {\r\n        this.active = true;\r\n        this.scheduled = undefined;\r\n        var actions = this.actions;\r\n        var error;\r\n        var index = -1;\r\n        var count = actions.length;\r\n        action = action || actions.shift();\r\n        do {\r\n            if (error = action.execute(action.state, action.delay)) {\r\n                break;\r\n            }\r\n        } while (++index < count && (action = actions.shift()));\r\n        this.active = false;\r\n        if (error) {\r\n            while (++index < count && (action = actions.shift())) {\r\n                action.unsubscribe();\r\n            }\r\n            throw error;\r\n        }\r\n    };\r\n    return AnimationFrameScheduler;\r\n}(AsyncScheduler));\r\n//# sourceMappingURL=AnimationFrameScheduler.js.map \r\n",null]}