{"remainingRequest":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\promise-polyfill\\promise.js","dependencies":[{"path":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\promise-polyfill\\promise.js","mtime":1532940285933},{"path":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"D:\\01_PERCEPTRON\\01_PERCEPTRON_FROM_98\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["(function (root) {\r\n\r\n  // Store setTimeout reference so promise-polyfill will be unaffected by\r\n  // other code modifying setTimeout (like sinon.useFakeTimers())\r\n  var setTimeoutFunc = setTimeout;\r\n\r\n  function noop() {}\r\n  \r\n  // Polyfill for Function.prototype.bind\r\n  function bind(fn, thisArg) {\r\n    return function () {\r\n      fn.apply(thisArg, arguments);\r\n    };\r\n  }\r\n\r\n  function Promise(fn) {\r\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\r\n    if (typeof fn !== 'function') throw new TypeError('not a function');\r\n    this._state = 0;\r\n    this._handled = false;\r\n    this._value = undefined;\r\n    this._deferreds = [];\r\n\r\n    doResolve(fn, this);\r\n  }\r\n\r\n  function handle(self, deferred) {\r\n    while (self._state === 3) {\r\n      self = self._value;\r\n    }\r\n    if (self._state === 0) {\r\n      self._deferreds.push(deferred);\r\n      return;\r\n    }\r\n    self._handled = true;\r\n    Promise._immediateFn(function () {\r\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\r\n      if (cb === null) {\r\n        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\r\n        return;\r\n      }\r\n      var ret;\r\n      try {\r\n        ret = cb(self._value);\r\n      } catch (e) {\r\n        reject(deferred.promise, e);\r\n        return;\r\n      }\r\n      resolve(deferred.promise, ret);\r\n    });\r\n  }\r\n\r\n  function resolve(self, newValue) {\r\n    try {\r\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\r\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\r\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\r\n        var then = newValue.then;\r\n        if (newValue instanceof Promise) {\r\n          self._state = 3;\r\n          self._value = newValue;\r\n          finale(self);\r\n          return;\r\n        } else if (typeof then === 'function') {\r\n          doResolve(bind(then, newValue), self);\r\n          return;\r\n        }\r\n      }\r\n      self._state = 1;\r\n      self._value = newValue;\r\n      finale(self);\r\n    } catch (e) {\r\n      reject(self, e);\r\n    }\r\n  }\r\n\r\n  function reject(self, newValue) {\r\n    self._state = 2;\r\n    self._value = newValue;\r\n    finale(self);\r\n  }\r\n\r\n  function finale(self) {\r\n    if (self._state === 2 && self._deferreds.length === 0) {\r\n      Promise._immediateFn(function() {\r\n        if (!self._handled) {\r\n          Promise._unhandledRejectionFn(self._value);\r\n        }\r\n      });\r\n    }\r\n\r\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\r\n      handle(self, self._deferreds[i]);\r\n    }\r\n    self._deferreds = null;\r\n  }\r\n\r\n  function Handler(onFulfilled, onRejected, promise) {\r\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\r\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\r\n    this.promise = promise;\r\n  }\r\n\r\n  /**\r\n   * Take a potentially misbehaving resolver function and make sure\r\n   * onFulfilled and onRejected are only called once.\r\n   *\r\n   * Makes no guarantees about asynchrony.\r\n   */\r\n  function doResolve(fn, self) {\r\n    var done = false;\r\n    try {\r\n      fn(function (value) {\r\n        if (done) return;\r\n        done = true;\r\n        resolve(self, value);\r\n      }, function (reason) {\r\n        if (done) return;\r\n        done = true;\r\n        reject(self, reason);\r\n      });\r\n    } catch (ex) {\r\n      if (done) return;\r\n      done = true;\r\n      reject(self, ex);\r\n    }\r\n  }\r\n\r\n  Promise.prototype['catch'] = function (onRejected) {\r\n    return this.then(null, onRejected);\r\n  };\r\n\r\n  Promise.prototype.then = function (onFulfilled, onRejected) {\r\n    var prom = new (this.constructor)(noop);\r\n\r\n    handle(this, new Handler(onFulfilled, onRejected, prom));\r\n    return prom;\r\n  };\r\n\r\n  Promise.all = function (arr) {\r\n    var args = Array.prototype.slice.call(arr);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      if (args.length === 0) return resolve([]);\r\n      var remaining = args.length;\r\n\r\n      function res(i, val) {\r\n        try {\r\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\r\n            var then = val.then;\r\n            if (typeof then === 'function') {\r\n              then.call(val, function (val) {\r\n                res(i, val);\r\n              }, reject);\r\n              return;\r\n            }\r\n          }\r\n          args[i] = val;\r\n          if (--remaining === 0) {\r\n            resolve(args);\r\n          }\r\n        } catch (ex) {\r\n          reject(ex);\r\n        }\r\n      }\r\n\r\n      for (var i = 0; i < args.length; i++) {\r\n        res(i, args[i]);\r\n      }\r\n    });\r\n  };\r\n\r\n  Promise.resolve = function (value) {\r\n    if (value && typeof value === 'object' && value.constructor === Promise) {\r\n      return value;\r\n    }\r\n\r\n    return new Promise(function (resolve) {\r\n      resolve(value);\r\n    });\r\n  };\r\n\r\n  Promise.reject = function (value) {\r\n    return new Promise(function (resolve, reject) {\r\n      reject(value);\r\n    });\r\n  };\r\n\r\n  Promise.race = function (values) {\r\n    return new Promise(function (resolve, reject) {\r\n      for (var i = 0, len = values.length; i < len; i++) {\r\n        values[i].then(resolve, reject);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Use polyfill for setImmediate for performance gains\r\n  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\r\n    function (fn) {\r\n      setTimeoutFunc(fn, 0);\r\n    };\r\n\r\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\r\n    if (typeof console !== 'undefined' && console) {\r\n      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the immediate function to execute callbacks\r\n   * @param fn {function} Function to execute\r\n   * @deprecated\r\n   */\r\n  Promise._setImmediateFn = function _setImmediateFn(fn) {\r\n    Promise._immediateFn = fn;\r\n  };\r\n\r\n  /**\r\n   * Change the function to execute on unhandled rejection\r\n   * @param {function} fn Function to execute on unhandled rejection\r\n   * @deprecated\r\n   */\r\n  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\r\n    Promise._unhandledRejectionFn = fn;\r\n  };\r\n  \r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Promise;\r\n  } else if (!root.Promise) {\r\n    root.Promise = Promise;\r\n  }\r\n\r\n})(this);\r\n",null]}