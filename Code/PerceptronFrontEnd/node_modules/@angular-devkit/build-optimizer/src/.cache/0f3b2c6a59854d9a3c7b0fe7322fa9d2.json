{"remainingRequest":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\mergeMapTo.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\mergeMapTo.js","mtime":1532940287400},{"path":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\~Code\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to the same Observable which is merged multiple\r\n * times in the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\r\n * to the same inner Observable.</span>\r\n *\r\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\r\n *\r\n * Maps each source value to the given Observable `innerObservable` regardless\r\n * of the source value, and then merges those resulting Observables into one\r\n * single Observable, which is the output Observable.\r\n *\r\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link concatMapTo}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {ObservableInput} innerObservable An Observable to replace each value from\r\n * the source Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits items from the given\r\n * `innerObservable` (and optionally transformed through `resultSelector`) every\r\n * time a value is emitted on the source Observable.\r\n * @method mergeMapTo\r\n * @owner Observable\r\n */\r\nexport function mergeMapTo(innerObservable, resultSelector, concurrent) {\r\n    if (concurrent === void 0) {\r\n        concurrent = Number.POSITIVE_INFINITY;\r\n    }\r\n    if (typeof resultSelector === 'number') {\r\n        concurrent = resultSelector;\r\n        resultSelector = null;\r\n    }\r\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\r\n}\r\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\r\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\r\nexport var MergeMapToOperator = /*@__PURE__*/ (function () {\r\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\r\n        if (concurrent === void 0) {\r\n            concurrent = Number.POSITIVE_INFINITY;\r\n        }\r\n        this.ish = ish;\r\n        this.resultSelector = resultSelector;\r\n        this.concurrent = concurrent;\r\n    }\r\n    MergeMapToOperator.prototype.call = function (observer, source) {\r\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\r\n    };\r\n    return MergeMapToOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport var MergeMapToSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(MergeMapToSubscriber, _super);\r\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\r\n        if (concurrent === void 0) {\r\n            concurrent = Number.POSITIVE_INFINITY;\r\n        }\r\n        _super.call(this, destination);\r\n        this.ish = ish;\r\n        this.resultSelector = resultSelector;\r\n        this.concurrent = concurrent;\r\n        this.hasCompleted = false;\r\n        this.buffer = [];\r\n        this.active = 0;\r\n        this.index = 0;\r\n    }\r\n    MergeMapToSubscriber.prototype._next = function (value) {\r\n        if (this.active < this.concurrent) {\r\n            var resultSelector = this.resultSelector;\r\n            var index = this.index++;\r\n            var ish = this.ish;\r\n            var destination = this.destination;\r\n            this.active++;\r\n            this._innerSub(ish, destination, resultSelector, value, index);\r\n        }\r\n        else {\r\n            this.buffer.push(value);\r\n        }\r\n    };\r\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\r\n        this.add(subscribeToResult(this, ish, value, index));\r\n    };\r\n    MergeMapToSubscriber.prototype._complete = function () {\r\n        this.hasCompleted = true;\r\n        if (this.active === 0 && this.buffer.length === 0) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\r\n        if (resultSelector) {\r\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        else {\r\n            destination.next(innerValue);\r\n        }\r\n    };\r\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\r\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\r\n        var result;\r\n        try {\r\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        catch (err) {\r\n            destination.error(err);\r\n            return;\r\n        }\r\n        destination.next(result);\r\n    };\r\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\r\n        this.destination.error(err);\r\n    };\r\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        var buffer = this.buffer;\r\n        this.remove(innerSub);\r\n        this.active--;\r\n        if (buffer.length > 0) {\r\n            this._next(buffer.shift());\r\n        }\r\n        else if (this.active === 0 && this.hasCompleted) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return MergeMapToSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=mergeMapTo.js.map \r\n",null]}