{"remainingRequest":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\distinctUntilChanged.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\distinctUntilChanged.js","mtime":1532940287373},{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Code\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { errorObject } from '../util/errorObject';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>A simple example with numbers</caption>\r\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\r\n *   .distinctUntilChanged()\r\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\r\n *\r\n * @example <caption>An example using a compare function</caption>\r\n * interface Person {\r\n *    age: number,\r\n *    name: string\r\n * }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'})\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\r\n * @method distinctUntilChanged\r\n * @owner Observable\r\n */\r\nexport function distinctUntilChanged(compare, keySelector) {\r\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\r\n}\r\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (function () {\r\n    function DistinctUntilChangedOperator(compare, keySelector) {\r\n        this.compare = compare;\r\n        this.keySelector = keySelector;\r\n    }\r\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\r\n    };\r\n    return DistinctUntilChangedOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(DistinctUntilChangedSubscriber, _super);\r\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\r\n        _super.call(this, destination);\r\n        this.keySelector = keySelector;\r\n        this.hasKey = false;\r\n        if (typeof compare === 'function') {\r\n            this.compare = compare;\r\n        }\r\n    }\r\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\r\n        return x === y;\r\n    };\r\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\r\n        var keySelector = this.keySelector;\r\n        var key = value;\r\n        if (keySelector) {\r\n            key = tryCatch(this.keySelector)(value);\r\n            if (key === errorObject) {\r\n                return this.destination.error(errorObject.e);\r\n            }\r\n        }\r\n        var result = false;\r\n        if (this.hasKey) {\r\n            result = tryCatch(this.compare)(this.key, key);\r\n            if (result === errorObject) {\r\n                return this.destination.error(errorObject.e);\r\n            }\r\n        }\r\n        else {\r\n            this.hasKey = true;\r\n        }\r\n        if (Boolean(result) === false) {\r\n            this.key = key;\r\n            this.destination.next(value);\r\n        }\r\n    };\r\n    return DistinctUntilChangedSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=distinctUntilChanged.js.map \r\n",null]}