{"remainingRequest":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\exhaustMap.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\exhaustMap.js","mtime":1532940287373},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\Deployment\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable only if the previous projected Observable has completed.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link exhaust}.</span>\r\n *\r\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. When it projects a source value to\r\n * an Observable, the output Observable begins emitting the items emitted by\r\n * that projected Observable. However, `exhaustMap` ignores every new projected\r\n * Observable if the previous projected Observable has not yet completed. Once\r\n * that one completes, it will accept and flatten the next projected Observable\r\n * and repeat this process.\r\n *\r\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaust}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable containing projected Observables\r\n * of each item of the source, ignoring projected Observables that start before\r\n * their preceding Observable has completed.\r\n * @method exhaustMap\r\n * @owner Observable\r\n */\r\nexport function exhaustMap(project, resultSelector) {\r\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\r\n}\r\nvar SwitchFirstMapOperator = /*@__PURE__*/ (function () {\r\n    function SwitchFirstMapOperator(project, resultSelector) {\r\n        this.project = project;\r\n        this.resultSelector = resultSelector;\r\n    }\r\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\r\n    };\r\n    return SwitchFirstMapOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar SwitchFirstMapSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(SwitchFirstMapSubscriber, _super);\r\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\r\n        _super.call(this, destination);\r\n        this.project = project;\r\n        this.resultSelector = resultSelector;\r\n        this.hasSubscription = false;\r\n        this.hasCompleted = false;\r\n        this.index = 0;\r\n    }\r\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\r\n        if (!this.hasSubscription) {\r\n            this.tryNext(value);\r\n        }\r\n    };\r\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\r\n        var index = this.index++;\r\n        var destination = this.destination;\r\n        try {\r\n            var result = this.project(value, index);\r\n            this.hasSubscription = true;\r\n            this.add(subscribeToResult(this, result, value, index));\r\n        }\r\n        catch (err) {\r\n            destination.error(err);\r\n        }\r\n    };\r\n    SwitchFirstMapSubscriber.prototype._complete = function () {\r\n        this.hasCompleted = true;\r\n        if (!this.hasSubscription) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\r\n        if (resultSelector) {\r\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        else {\r\n            destination.next(innerValue);\r\n        }\r\n    };\r\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\r\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\r\n        try {\r\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\r\n            destination.next(result);\r\n        }\r\n        catch (err) {\r\n            destination.error(err);\r\n        }\r\n    };\r\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\r\n        this.destination.error(err);\r\n    };\r\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.remove(innerSub);\r\n        this.hasSubscription = false;\r\n        if (this.hasCompleted) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return SwitchFirstMapSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=exhaustMap.js.map \r\n",null]}