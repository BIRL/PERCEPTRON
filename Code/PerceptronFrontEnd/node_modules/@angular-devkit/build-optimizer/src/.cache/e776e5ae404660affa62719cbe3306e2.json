{"remainingRequest":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\expand.js","dependencies":[{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\rxjs\\_esm5\\operators\\expand.js","mtime":1532940287373},{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532940271448},{"path":"E:\\01_PERCEPTRON\\PERCEPTRON_v1.0.0.0\\PerceptronFrontEnd\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1532940256149}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { errorObject } from '../util/errorObject';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Recursively projects each source value to an Observable which is merged in\r\n * the output Observable.\r\n *\r\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\r\n * projection function to every source value as well as every output value.\r\n * It's recursive.</span>\r\n *\r\n * <img src=\"./img/expand.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger. *Expand* will re-emit on the output\r\n * Observable every source value. Then, each output value is given to the\r\n * `project` function which returns an inner Observable to be merged on the\r\n * output Observable. Those output values resulting from the projection are also\r\n * given to the `project` function to produce new output values. This is how\r\n * *expand* behaves recursively.\r\n *\r\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var powersOfTwo = clicks\r\n *   .mapTo(1)\r\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\r\n *   .take(10);\r\n * powersOfTwo.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n *\r\n * @param {function(value: T, index: number) => Observable} project A function\r\n * that, when applied to an item emitted by the source or the output Observable,\r\n * returns an Observable.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each projected inner Observable.\r\n * @return {Observable} An Observable that emits the source values and also\r\n * result of applying the projection function to each value emitted on the\r\n * output Observable and and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method expand\r\n * @owner Observable\r\n */\r\nexport function expand(project, concurrent, scheduler) {\r\n    if (concurrent === void 0) {\r\n        concurrent = Number.POSITIVE_INFINITY;\r\n    }\r\n    if (scheduler === void 0) {\r\n        scheduler = undefined;\r\n    }\r\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\r\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\r\n}\r\nexport var ExpandOperator = /*@__PURE__*/ (function () {\r\n    function ExpandOperator(project, concurrent, scheduler) {\r\n        this.project = project;\r\n        this.concurrent = concurrent;\r\n        this.scheduler = scheduler;\r\n    }\r\n    ExpandOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\r\n    };\r\n    return ExpandOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport var ExpandSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(ExpandSubscriber, _super);\r\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\r\n        _super.call(this, destination);\r\n        this.project = project;\r\n        this.concurrent = concurrent;\r\n        this.scheduler = scheduler;\r\n        this.index = 0;\r\n        this.active = 0;\r\n        this.hasCompleted = false;\r\n        if (concurrent < Number.POSITIVE_INFINITY) {\r\n            this.buffer = [];\r\n        }\r\n    }\r\n    ExpandSubscriber.dispatch = function (arg) {\r\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\r\n        subscriber.subscribeToProjection(result, value, index);\r\n    };\r\n    ExpandSubscriber.prototype._next = function (value) {\r\n        var destination = this.destination;\r\n        if (destination.closed) {\r\n            this._complete();\r\n            return;\r\n        }\r\n        var index = this.index++;\r\n        if (this.active < this.concurrent) {\r\n            destination.next(value);\r\n            var result = tryCatch(this.project)(value, index);\r\n            if (result === errorObject) {\r\n                destination.error(errorObject.e);\r\n            }\r\n            else if (!this.scheduler) {\r\n                this.subscribeToProjection(result, value, index);\r\n            }\r\n            else {\r\n                var state = { subscriber: this, result: result, value: value, index: index };\r\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\r\n            }\r\n        }\r\n        else {\r\n            this.buffer.push(value);\r\n        }\r\n    };\r\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\r\n        this.active++;\r\n        this.add(subscribeToResult(this, result, value, index));\r\n    };\r\n    ExpandSubscriber.prototype._complete = function () {\r\n        this.hasCompleted = true;\r\n        if (this.hasCompleted && this.active === 0) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this._next(innerValue);\r\n    };\r\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        var buffer = this.buffer;\r\n        this.remove(innerSub);\r\n        this.active--;\r\n        if (buffer && buffer.length > 0) {\r\n            this._next(buffer.shift());\r\n        }\r\n        if (this.hasCompleted && this.active === 0) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return ExpandSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=expand.js.map \r\n",null]}